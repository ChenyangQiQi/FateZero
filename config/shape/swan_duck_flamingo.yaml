# CUDA_VISIBLE_DEVICES=1 python test_fatezero.py --config config/shape/swan_duck_flamingo.yaml
pretrained_model_path: "./ckpt/swan_150"

dataset_config:
    path: "./data/attribute/swan_swarov"
    prompt: "a black swan with a red beak swimming in a river near a wall and bushes,"
    n_sample_frame: 8
    sampling_rate: 1
    stride: 80
    offset: 
        left: 0
        right: 0
        top: 0
        bottom: 0

editing_config:
    use_invertion_latents: true
    use_inversion_attention: true
    guidance_scale: 7.5
    editing_prompts: [
        # source prompt
        a black swan with a red beak swimming in a river near a wall and bushes,

        # foreground color and species
        a white duck with a yellow beak swimming in a river near a wall and bushes,
        a pink flamingo with a red beak swimming in a river near a wall and bushes,
        
    ]
    p2p_config:
        0: 
            # Whether to directly copy the cross attention from source 
            # True: directly copy, better for object replacement
            # False: keep source attention, better for style
            is_replace_controller: False

            # Semantic preserving and replacement Debug me
            cross_replace_steps: 
                default_: 0.8

            # Source background structure preserving, in [0, 1]. 
            # e.g., =0.6 Replace the first 60% steps self-attention
            self_replace_steps: 0.6

            
            # Amplify the target-words cross attention, larger value, more close to target
            # eq_params: 
            #     words: ["silver", "sculpture"]
            #     values: [2,2] 
            
            # Target structure-divergence hyperparames
            # If you change the shape of object better to use all three line, otherwise, no need.
            # Without following three lines, all self-attention will be replaced
            # blend_words: [['cat',], ["cat",]] 
            # blend_self_attention:  True
            # # blend_latents: False   # performance not so good in our case, need debug            
            # blend_th: [2, 2]
            # preserve source structure of blend_words , [0, 1]
            # default is blend_th: [2, 2]  # preserve all source self-attention 
            # blend_th : [0.0, 0.0], mask -> 1, use more target self-attention att_replace, more generated attention, less source acttention
            
        
        1:
            is_replace_controller: False
            cross_replace_steps: 
                default_: 0.0
            self_replace_steps: 0.5
            
            # eq_params: 
            #     words: ["duck"]
            #     values: [5] # amplify attention to the word "tiger" by *2 
            use_inversion_attention: True
            blend_words: [['swan',], ["cat",]] 
            blend_self_attention:  True
            # blend_latents: False   # performance not so good in our case, need debug            
            blend_th: [0.2, 0.2]


        2:
            is_replace_controller: False
            cross_replace_steps: 
                default_: 0.3
            self_replace_steps: 0.5
            
            # eq_params: 
            #     words: ["duck"]
            #     values: [5] # amplify attention to the word "tiger" by *2 
            use_inversion_attention: True
            blend_words: [['swan',], ["cat",]] 
            blend_self_attention:  True
            # blend_latents: False   # performance not so good in our case, need debug            
            blend_th: [0.2, 0.2]

    clip_length: "${..dataset_config.n_sample_frame}"
    sample_seeds: [0]
    

    num_inference_steps: 30
    prompt2prompt_edit: True

    
model_config:
    lora: 160
    # temporal_downsample_time: 4
    # SparseCausalAttention_index: ['mid'] 
    # least_sc_channel: 1280
    # least_sc_channel: 100000

test_pipeline_config:
    target: video_diffusion.pipelines.p2p_ddim_spatial_temporal.P2pDDIMSpatioTemporalPipeline
    num_inference_steps: "${..validation_sample_logger.num_inference_steps}"



seed: 0

